generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.qakwakqndswtiysnktep:jumper-admin0000@aws-0-us-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=3"
  directUrl = "postgresql://postgres.qakwakqndswtiysnktep:jumper-admin0000@aws-0-us-east-1.pooler.supabase.com:5432/postgres"
}
model Shipment {
  id              String    @id @default(cuid())
  description     String
  weight          Float
  origin          String
  destination     String
  price           Int
  postalServiceFee Int?
  sender          Customer? @relation("sender", fields: [senderId], references: [id])
  receiver        Customer? @relation("receiver", fields: [receiverId], references: [id])
  senderId        String
  receiverId      String
  type            ShipmentType
  status          ShipmentStatus
  paymentStatus   PaymentStatus @default(UNPAID)  // New field
  trackingNumber  String    @unique @default(cuid())
  createdAt       DateTime  @default(now())
  estimatedValue  Int
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?
}
model Customer {
  id           String     @id @default(cuid())
  fullName     String
  email        String?    @unique
  phoneNumber  String     @unique
  address      String
  city         String?
  type CustomerType
  receiver       Shipment[]    @relation("receiver")
  sender         Shipment[]    @relation("sender")
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String
  phoneNumber   String     @unique
  role          UserRole
  shipments     Shipment[]
  accounts      Account[]
  sessions      Session[]
}

// Rest of the schema remains the same
enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  ARRIVED
  DELIVERED
  CANCELLED
}
enum CustomerType {
  SENDER
  RECEIVER
}
enum UserRole {
  USER
  ADMIN
  SHIPPING_AGENT
}
enum ShipmentType {
  FREIGHT
  EXPRESS
 GP
}

enum PaymentStatus {
  PAID
  UNPAID
}